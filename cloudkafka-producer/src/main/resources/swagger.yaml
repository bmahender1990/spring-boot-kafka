swagger: "2.0"
info:
  description: ""
  version: "1.0.0"
  title: "Spring kafka POC"
  termsOfService: ""
  contact:
    email: "apiteam@swagger.io"
host: "localhost:8181"
tags:
- name: "authenticate"
  description: "Operations about authenticate"
- name: "kafka/customer"
  description: "Operations about customer"
   
schemes:
- "http"

securityDefinitions:
  api_key:
    type: apiKey
    name: Authorization
    in: header
    
    
parameters:
  Authorization:    
    name: Authorization
    in: header
    description: Authorization token 
    required: true
    type: string
  Application-Id:
    name: Application-Id
    in: header
    type: string
  Activity-Id:
    name: Activity-Id
    in: header
    type: string
x-globalParameters: &GLOB_PARAMS
  - $ref: '#/parameters/Application-Id'
  - $ref: '#/parameters/Activity-Id'
 

paths:

  /authenticate:
    post:
      tags:
      - "authenticate"
      summary: "authenticate user"
      description: "This can only be done by the logged in user."
      operationId: "authenticate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
 

  "/kafka/customer":
    parameters: *GLOB_PARAMS
    post:
      tags:
      - "kafka/customer"
      summary: "Post customer data to kafka"
      description: "Returns status"
      operationId: "customer"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "customer object that needs to be post to kafka"
        required: true
        schema:
          $ref: "#/definitions/customer"
      responses:
        405:
          description: "Invalid input"
          schema:
            $ref: '#/definitions/CustomerResponse'
      security:
      - sec_auth: []
         
 
  

definitions:
    
  customer:
    type: "object"
    required:
    - "customerNumber"
    - "firstName"
    - "lastName"
    - "birthdate"
    - "country"
    - "countryCode"
    - "mobileNumber"
    - "email"
    - "customerStatus"
    - "address"
      
    properties:
    
      customerNumber:
        type: "string"
        format: "string"
        maxLength: 10
        pattern: '^[a-zA-Z0-9]+$'
        
      firstName:
        type: "string"
        format: "string"
        minLength: 10
        maxLength: 50
        
      lastName:
        type: "string"
        format: "string"
        minLength: 10
        maxLength: 50
       
      birthdate:
        type: "string"
        format: "string"
        pattern: '^\d{2}-\d{2}-\d{4}$'
        
      country:
        type: "string"
        format: "string"
        
      countryCode:
        type: "string"
        minLength: 2
        maxLength: 2
       
      mobileNumber:
        type: number
        maxLength:  10
        
      email:
        type: "string"
        format: email
        
      customerStatus:
        type: "string"
        enum:
        - "Open"
        - "Close"
        - "Suspended"
        - "Restored"
     
      address:
        $ref: '#/definitions/CustomerAddress'
    xml:
      name: "customer"
      
      
  CustomerAddress:
    type: "object"
    required:
    - "addressLine1"
    - "postalCode"
    properties:
      addressLine1:
        type: "string"
        format: "string"
        maxLength: 50
      addressLine2:
        type: "string"
        format: "string"
      street:
        type: "string"
        format: "string"
      postalCode:
       type: "string"
       format: "string"
       minLength: 5
    xml:
      name: "CustomerAddress"
  
  
  CustomerResponse:
    type: "object"
    required:
    - "status"
    - "message"
    properties:
      status:
        type: "string"
        format: "string"
      message:
        type: "string"
        format: "string"
      error_type:
        type: "string"
        format: "string"
    xml:
      name: "CustomerResponse"
      
  User:
    type: "object"
    properties:
      username:
        type: "string"
        format: "string"
      password:
        type: "string"
        format: "string"
    xml:
      name: "User"
      

externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"